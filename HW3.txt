В ДЗ для реализации выбран паттерн Фабричного метода. Идея его использования в следующем:

Предприятие закупает ингридиенты для своих блюд у нескольких поставщиков. Формирование заказа поставщику возможно как в ручном режиме сотрудником,
так и в автоматическом режиме в результате работы системы планирования закупок. С системой каждого из поставщиков осуществляется интеграция
посредством обмена файлами, формирующимия на основании данных объекта PurchaseOrder в нашей системе. Проблема в том, что у всех поставщиков
различные системы, обмен с которыми происходит файлами различного формата и структуры, а также по собственному регламенту. По этой причине, для каждого
из поставщиков реализован собсвтенный класс SupplierExchanger, реализующий интерфейс Exchanger. Фабрика выдает необходимый Exchanger в зависимости от поставщика.

public class ExchangerFabric {
    public static final String SupplierOne = "SuppOne";
    public static final String SupplierTwo = "SuppTwo";
    public static final String SupplierThree = "SuppThree";
    public Exchanger getExchanger(String purchaserIdentifier){
        switch(purchaserIdentifier){
            case SupplierOne: return new SupplierOneExchanger();
            case SupplierTwo: return new SupplierTwoExchanger();
            case SupplierThree: return new SupplierThreeExchanger();
            default: return null;
        }
    }
}

public class SupplierOneExchanger implements Exchanger {
    @Override
    public void sendOrderData(PurchaseOrder purchaseOrder) {
        System.out.println("Сформирован плоский текстовый файл");
    }
}


public class SupplierTwoExchanger implements Exchanger {
    @Override
    public void sendOrderData(PurchaseOrder purchaseOrder) {
        System.out.println("Сформировано JSON сообщение");
    }
}


public class SupplierThreeExchanger implements Exchanger {
    @Override
    public void sendOrderData(PurchaseOrder purchaseOrder) {
        System.out.println("Сформировано XML сообщение");
    }
}

public class Example {
    public void sendPurchaseOrder(PurchaseOrder purchaseOrder){
        String supplierIdentifier = purchaseOrder.getSupplier().getIdentifier();
        ExchangerFabric exchangerFabric = new ExchangerFabric();
        Exchanger supplierExchanger = exchangerFabric.getExchanger(supplierIdentifier);
        supplierExchanger.sendOrderData(purchaseOrder);
    }
}
